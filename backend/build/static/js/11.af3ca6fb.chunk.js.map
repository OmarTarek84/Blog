{"version":3,"sources":["Components/Posts/Post/Post.js","Containers/Posts/Posts.js"],"names":["post","props","indexOfLastTodo","activePage","itemPerPage","indexOfFirstTodo","renderedPosts","posts","slice","isLoading","react_default","a","createElement","Spinner","map","className","key","_id","title","body","substring","Button","click","onGoToSinglePost","bind","require","dbPromise","idb","db","objectStoreNames","contains","createObjectStore","keyPath","Posts","deferredPrompt","networkDataReceived","signal","axios","CancelToken","source","state","noPosts","loading","handlePageChange","pageNumber","_this","setState","id","history","push","pathname","configurePushSub","reg","navigator","serviceWorker","ready","then","sw","pushManager","getSubscription","sub","console","log","endpoint","convertedPublicKey","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","urlBase64ToUint8Array","subscribe","userVisibleOnly","applicationServerKey","newSub","JSON","stringify","headers","Content-Type","Accept","Authorization","token","cancelToken","res","catch","err","_this2","this","Notification","requestPermission","result","socket","OpenWebSocket","on","data","prevState","concat","newPost","filteredPosts","filter","p","deletedPost","query","cancel","st","_this3","onLine","transaction","objectStore","getAll","Fragment","Post_Post","Pagination_default","itemsCountPerPage","totalItemsCount","linkClass","itemClass","activeClass","pageRangeDisplayed","onChange","Component","connect","auth"],"mappings":"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","file":"static/js/11.af3ca6fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Post.css';\r\nimport Button from '../../Button/Button';\r\nimport Spinner from '../../Spinner/Spinner';\r\n\r\nconst post = props => {\r\n    var indexOfLastTodo = props.activePage * props.itemPerPage;\r\n    var indexOfFirstTodo = indexOfLastTodo - props.itemPerPage;\r\n    var renderedPosts = props.posts.slice(indexOfFirstTodo, indexOfLastTodo);\r\n    return props.isLoading\r\n    ?\r\n    <Spinner />\r\n    :\r\n    renderedPosts.map(post => {\r\n        return (\r\n                <div className=\"post\" key={post._id}>\r\n                    <div className=\"post__title\">{post.title}</div>\r\n                    <div className=\"post__desc\">{post.body.substring(0,300) + '...'}</div>\r\n                    <div className=\"post__button__link\">\r\n                        <Button click={props.onGoToSinglePost.bind(this, post._id)}>Read More</Button>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }); \r\n};\r\n\r\nexport default post;","import React, {Component} from 'react';\r\nimport './Posts.css';\r\nimport Post from '../../Components/Posts/Post/Post';\r\nimport Pagination from 'react-js-pagination';\r\nimport axios from 'axios';\r\nimport Spinner from '../../Components/Spinner/Spinner';\r\nimport OpenWebSocket from 'socket.io-client';\r\nimport * as idb from 'idb';\r\nimport {connect} from 'react-redux';\r\nrequire('bootstrap/dist/css/bootstrap.css');\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n    var padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n    var base64 = (base64String + padding)\r\n      .replace(/\\-/g, '+')\r\n      .replace(/_/g, '/');\r\n  \r\n    var rawData = window.atob(base64);\r\n    var outputArray = new Uint8Array(rawData.length);\r\n  \r\n    for (var i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n  }\r\n\r\nconst dbPromise = idb.openDB('allPosts', 1, (db) => {\r\n    if (!db.objectStoreNames.contains('posts')) {\r\n        db.createObjectStore('posts', {keyPath: '_id'});\r\n    }\r\n\r\n    if (!db.objectStoreNames.contains('users')) {\r\n        db.createObjectStore('posts', {keyPath: '_id'});\r\n    }\r\n    if (!db.objectStoreNames.contains('sync-posts')) {\r\n        db.createObjectStore('sync-posts', {keyPath: 'body'});\r\n    }\r\n});\r\n\r\nfunction readAllPosts(st) {\r\n    return dbPromise.then(db => {\r\n        var transaction = db.transaction(st, 'readonly');\r\n        var store = transaction.objectStore(st);\r\n        return store.getAll();\r\n    });\r\n}\r\n\r\nclass Posts extends Component {\r\n\r\n    deferredPrompt = null;\r\n    networkDataReceived = false;\r\n    signal = axios.CancelToken.source();\r\n    state = {\r\n        posts: [],\r\n        itemPerPage: 12,\r\n        activePage: 1,\r\n        noPosts: false,\r\n        loading: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.token) {\r\n            if ('Notification' in window) {\r\n                Notification.requestPermission((result) => {\r\n                    if (result !== 'granted') {\r\n                    console.log('not granted');\r\n                    } else {\r\n                    this.configurePushSub();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        const socket = OpenWebSocket('/');\r\n        socket.on('newpost', data => {\r\n            this.setState(prevState => {\r\n                return {\r\n                    posts: prevState.posts.concat(data.newPost)\r\n                };\r\n            });\r\n        });\r\n        socket.on('deletedPost', (data) => {\r\n            const filteredPosts = this.state.posts.filter(p => {\r\n                return p._id !== data.deletedPost._id;\r\n            });\r\n            this.setState({posts: filteredPosts});\r\n        });\r\n        this.setState({loading: true});\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                    posts {\r\n                        _id\r\n                        title\r\n                        body\r\n                        photo\r\n                        createdAt\r\n                        updatedAt\r\n                        comments {\r\n                            _id\r\n                            comment\r\n                            createdAt\r\n                        }\r\n                        user {\r\n                            _id\r\n                            name\r\n                            email\r\n                            createdAt\r\n                            photo\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        };\r\n        return axios.post('/graphql', requestBody, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            cancelToken: this.signal.token\r\n        }).then(result => {\r\n            const posts = result.data.data.posts;\r\n            this.networkDataReceived = true;\r\n            if (posts.length <= 0) {\r\n                this.setState({noPosts: true});\r\n            } else {\r\n                this.setState({noPosts: false});\r\n            }\r\n            this.setState({posts: posts});\r\n        })\r\n        .then(() => {\r\n                this.setState({loading: false});\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.signal.cancel('posts signal cancelled');\r\n    }\r\n\r\n    handlePageChange = (pageNumber) => {\r\n        this.setState({ activePage: pageNumber })\r\n    }\r\n\r\n    onGoToSinglePost = (id) => {\r\n        this.props.history.push({\r\n            pathname: '/post/' + id,\r\n        });\r\n    };\r\n\r\n    configurePushSub = () => {\r\n        if (!('serviceWorker') in navigator) {\r\n          return;\r\n      }\r\n      let reg;\r\n      navigator.serviceWorker.ready.then(sw => {\r\n          reg = sw;\r\n          return sw.pushManager.getSubscription();\r\n      })\r\n      .then(sub => {\r\n          if (!sub) {\r\n              const publicKey = 'BLge1u7VbGLVM2pX5awJQlMCWCYk85dIszcMHqwA9MIksA8BPrJrA8x6ZB0OM9QOqbgL-NyqaR9pvKVJYSSgFZM';\r\n              const convertedPublicKey = urlBase64ToUint8Array(publicKey);\r\n              return reg.pushManager.subscribe({\r\n                  userVisibleOnly: true,\r\n                  applicationServerKey: convertedPublicKey\r\n              })\r\n              .then((newSub) => {\r\n                  return newSub;\r\n          })\r\n          } else {\r\n              console.log(sub.endpoint);\r\n              return null;\r\n          }\r\n      })\r\n      .then(newSub => {\r\n          if (newSub){\r\n            return axios.post('/subscribe', JSON.stringify(newSub), {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + this.props.token\r\n                },\r\n                cancelToken: this.signal.token\r\n            }).then(res => {\r\n                console.log(res);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n          }\r\n      });\r\n      }\r\n\r\n    render() {\r\n        const {posts} = this.state;\r\n        if (posts === null) {\r\n            return <Spinner />\r\n        }\r\n        if ('indexedDB' in window) {\r\n            if (!navigator.onLine) {\r\n                readAllPosts('posts').then(data => {\r\n                    this.setState({posts: data});\r\n                });\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n            <div className=\"posts\">\r\n                <h1>Posts</h1>\r\n                <div className=\"post_flex\">\r\n                    {\r\n                     this.state.noPosts\r\n                     ?\r\n                     <h2>No Posts Created Yet</h2>\r\n                     :\r\n                     <Post posts={this.state.posts}\r\n                           activePage={this.state.activePage}\r\n                           itemPerPage={this.state.itemPerPage}\r\n                           isLoading={this.state.loading}\r\n                           onGoToSinglePost={this.onGoToSinglePost} />\r\n                     }\r\n                </div>\r\n            </div>\r\n            {this.state.noPosts \r\n             ? \r\n             null \r\n             : \r\n             <Pagination\r\n             activePage={this.state.activePage}\r\n             itemsCountPerPage={this.state.itemPerPage}\r\n             totalItemsCount={this.state.posts.length}\r\n             linkClass={'page-link'}\r\n             itemClass={'page-item'}\r\n             activeClass={'active'}\r\n             pageRangeDisplayed={5}\r\n             onChange={this.handlePageChange.bind(this)} />\r\n            }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      token: state.auth.token\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Posts);"],"sourceRoot":""}