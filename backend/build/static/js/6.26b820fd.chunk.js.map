{"version":3,"sources":["Components/EditProfileModal/EditProfileModal.js","Components/Backdrop/Backdrop.js","Components/Form/Form.js","hoc/Error.js","Components/Post/Post.js","Components/Comments/Comment/Comment.js","Components/Comments/Comments.js","Containers/Post/Post.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","profileModal","props","a","createElement","className","children","backdrop","show","onClick","clicked","form","errorMessage","element","classes","touched","invalid","push","invalidN","elementType","Fragment","Object","assign","value","elementConfig","onChange","changed","join","options","map","option","displayValue","label","style","color","error","WrappedComponent","axios","_Component","_temp","_getPrototypeOf2","_this","E_omar_programming_portofolioooo_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_len","arguments","length","args","Array","_key","E_omar_programming_portofolioooo_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","E_omar_programming_portofolioooo_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","apply","concat","state","closeBackdrop","setState","E_omar_programming_portofolioooo_blog_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","E_omar_programming_portofolioooo_blog_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","_this2","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","err","eject","errormsg","data","errors","message","react__WEBPACK_IMPORTED_MODULE_5___default","_Components_Backdrop_Backdrop__WEBPACK_IMPORTED_MODULE_7__","_Components_EditProfileModal_EditProfileModal__WEBPACK_IMPORTED_MODULE_6__","Component","post","fontAwesomeClasses","buttonClicked","react_default","title","src","image","alt","token","userId","postUserId","type","like","disabled","numberOfLikes","body","onGoToProfile","bind","userPostId","cursor","textDecoration","postCreator","date","react_router_dom","to","Button","click","openBackdrop","red","deletePost","disabledd","comment","user","comments","numberOfComments","Comment_Comment","_id","name","createdAt","dbPromise","idb","db","objectStoreNames","contains","createObjectStore","keyPath","Post","classCallCheck","possibleConstructorReturn","getPrototypeOf","signal","CancelToken","source","commentEntered","backdropShow","modalShow","showSnackbar","editPostForm","placeholder","validationRules","required","maxLength","valid","postPhoto","formIsValid","imageSelected","file","deleteButtonClicked","buttonSelected","commentButtonDisabled","likes","editPostButtonClicked","changeCommentInput","inputRef","current","objectSpread","photo","changeInput","event","inputType","stateElement","target","files","URL","createObjectURL","checkValidity","rules","isValid","trim","emailValid","test","editPost","e","preventDefault","prevState","formData","FormData","append","put","headers","Content-Type","Authorization","cancelToken","then","result","path","filepath","filePath","requestBody","query","variables","id","updatedPost","updatePost","catch","console","log","st","transaction","objectStore","delete","complete","postId","history","sendCommentInsertedToDB","insertedComment","insertComment","navigator","serviceWorker","ready","sw","active","postMessage","JSON","stringify","userInsertedComment","onLine","window","ObjectID","toHexString","sync","register","goToProfile","pathname","isLiked","checked","match","params","likePost","React","createRef","socket","OpenSocket","on","postState","likesFiltered","filter","p","singlePost","input","document","querySelector","forEach","requestBody2","cancel","_this3","elementArray","config","_this$state","Spinner","react_js_snackbar_es","Icon","Show","src_Components_Post_Post","ref","Comments","Backdrop","CSSTransition","mountOnEnter","unmountOnExit","in","timeout","enter","exit","classNames","enterActive","exitActive","EditProfileModal","viewModal","encType","Form","ErrorComponent","connect","auth"],"mappings":"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","file":"static/js/6.26b820fd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './EditProfileModal.css';\r\n\r\nconst profileModal = props => {\r\n    return (\r\n        <div className=\"profileModal\">{props.children}</div>\r\n    )\r\n};\r\n\r\nexport default profileModal;","import React from 'react';\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = props => {\r\n    return props.show ? <div className='backdrop' onClick={props.clicked}>{props.children}</div> : null;\r\n};\r\n\r\nexport default backdrop;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst form = props => {\r\n    let element = null;\r\n    let errorMessage;\r\n    const classes = []\r\n    if (props.touched && props.invalid) {\r\n        classes.push('invalid');\r\n        errorMessage = props.errorMessage\r\n    }\r\n\r\n    if (props.touched && !props.invalid && !props.invalidN) {\r\n        classes.push('valid');\r\n        errorMessage = ''\r\n    }\r\n\r\n    if (props.touched && props.invalidN) {\r\n        classes.push('invalid-newpost');\r\n        errorMessage = props.errorMessage\r\n    }\r\n\r\n    if (props.touched && !props.invalidN && !props.invalid) {\r\n        classes.push('valid-newpost');\r\n        errorMessage = ''\r\n    }\r\n    switch(props.elementType) {\r\n        case 'input':\r\n            element = (\r\n                <>\r\n                <input value={props.value}\r\n                       {...props.elementConfig}\r\n                       onChange={props.changed}\r\n                       className= {classes.join(' ')}/>\r\n                </>\r\n            )\r\n            break;\r\n        case 'textarea':\r\n            element = (\r\n                <>\r\n                    <textarea {...props.elementConfig}\r\n                              onChange={props.changed}\r\n                              className={classes.join(' ')}\r\n                              value={props.value}></textarea>\r\n                </>\r\n            )\r\n            break;\r\n        case 'select':\r\n            element = (\r\n                <select value={props.value} onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => {\r\n                        return (\r\n                            <option value={option.value}>\r\n                                {option.displayValue}\r\n                            </option>\r\n                        )\r\n                    })}\r\n                </select>\r\n            )\r\n            break;\r\n        default:\r\n            element = (\r\n                <input value={props.value}\r\n                        {...props.elementConfig}\r\n                        onChange={props.changed} />\r\n            )\r\n            break;\r\n    }\r\n    return (\r\n        <>\r\n            <label>{props.label}</label>\r\n            {element}\r\n            <p style={{color: 'red'}}>{errorMessage}</p>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default form;","import React, {Component} from 'react';\r\nimport Modal from '../Components/EditProfileModal/EditProfileModal';\r\nimport Backdrop from '../Components/Backdrop/Backdrop';\r\nimport './Error.css';\r\n\r\nconst error = (WrappedComponent, axios) => {\r\n    return class extends Component {\r\n        state = {\r\n            error: null\r\n        }\r\n\r\n        componentWillMount() {\r\n            this.reqInterceptor = axios.interceptors.request.use(req => {\r\n                this.setState({error: null});\r\n                return req;\r\n            });\r\n\r\n            this.resInterceptor = axios.interceptors.response.use(res => {\r\n                return res;\r\n            }, err => {\r\n                this.setState({error: err});\r\n            });\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            axios.interceptors.request.eject(this.reqInterceptor);\r\n            axios.interceptors.response.eject(this.resInterceptor);\r\n        }\r\n\r\n        closeBackdrop = () => {\r\n            this.setState({error: null});\r\n        }\r\n\r\n        render() {\r\n            let errormsg;\r\n            if (this.state.error) {\r\n                errormsg = this.state.error.response.data.errors[0].message;\r\n            } else {\r\n                errormsg = null;\r\n            }\r\n            return (\r\n                <>\r\n                <Backdrop show={this.state.error} clicked={this.closeBackdrop}>\r\n                    <Modal>\r\n                        <div className=\"error\">\r\n                            <h1>An Error Occurred</h1>\r\n                            <div className=\"editProfile__icon\" onClick={this.closeBackdrop}>\r\n                                <i className=\"fas fa-times-circle\"></i>\r\n                            </div>\r\n                            <p>{errormsg}</p>\r\n                        </div>\r\n                    </Modal>\r\n                </Backdrop>\r\n                <WrappedComponent {...this.props} />\r\n                </>\r\n            )\r\n        }\r\n    }\r\n};\r\n\r\nexport default error;","import React from 'react';\r\nimport  './Post.css';\r\nimport Button from '../Button/Button';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst post = props => {\r\n    let fontAwesomeClasses = ['fas', 'fa-thumbs-up'];\r\n    if (props.buttonClicked) {\r\n        fontAwesomeClasses.push('clicked');\r\n    }\r\n    return (\r\n        <div className=\"post\">\r\n            <h1>{props.title}</h1>\r\n            <div className=\"post__image\">\r\n                <img src={props.image} alt=\"postImage\" />\r\n            </div>\r\n             <div className=\"post__like\">\r\n                <div className=\"post__like__font\">\r\n                {props.token\r\n                 ?\r\n                    props.userId !== props.postUserId\r\n                    ?\r\n                    <>\r\n                        <input type=\"checkbox\" className=\"likeInput\" onChange={props.like} disabled={props.buttonClicked} />\r\n                        <i className={fontAwesomeClasses.join(' ')}></i>\r\n                    </>\r\n                    :\r\n                    null\r\n                 :\r\n                 null}\r\n                    <p><span>{props.numberOfLikes}</span> Likes</p>\r\n                </div>\r\n             </div>\r\n            <div className=\"post__body\">\r\n                <p>{props.body}</p>\r\n            </div>\r\n            <div className=\"post__postedBy\">\r\n                <p>Posted By <span onClick={props.onGoToProfile.bind(this, props.userPostId)} style={{cursor: 'pointer', textDecoration: 'underline'}}>{props.postCreator}</span> On <span>{props.date}</span></p>\r\n            </div>\r\n            <div className=\"post__buttons\">\r\n                <div className=\"post__buttons__link\">\r\n                    <Link to=\"/posts\">Back To Posts</Link>\r\n                </div>\r\n                {props.userId === props.postUserId\r\n                 ?\r\n                 <>\r\n                    <div className=\"post__buttons__link\">\r\n                        <Button type=\"button\" click={props.openBackdrop} disabled={props.disabled}>Update Post</Button>\r\n                    </div>\r\n                    <div className=\"post__buttons__link\">\r\n                        <Button type=\"button\" red click={props.deletePost} disabled={props.disabledd}>Delete Post</Button>\r\n                    </div>\r\n                 </>\r\n                : null\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default post;","import React from 'react';\r\nimport './Comment.css';\r\n\r\nconst comment = props => {\r\n    return (\r\n        <div className=\"post__comments__comments__comment\">\r\n            <p>{props.comment}</p>\r\n            <p>Posted By <span>{props.user}</span> on <span>{props.date}</span></p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default comment;","import React from 'react';\r\nimport Comment from './Comment/Comment';\r\n\r\nconst comments = props => {\r\n    return (\r\n        <div className=\"post__comments__comments\">\r\n            <h3><span>{props.numberOfComments}</span> Comments</h3>\r\n            {props.comments.map(comment => {\r\n                return <Comment key={comment._id}\r\n                                comment={comment.comment}\r\n                                user={comment.user.name}\r\n                                date={comment.createdAt} />\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default comments;","import React, {Component} from 'react';\r\nimport Button from '../../Components/Button/Button';\r\nimport axios from 'axios';\r\nimport './Post.css';\r\nimport Backdrop from '../../Components/Backdrop/Backdrop';\r\nimport Modal from '../../Components/EditProfileModal/EditProfileModal';\r\nimport CSSTransition from 'react-transition-group/CSSTransition';\r\nimport Input from '../../Components/Form/Form';\r\nimport Spinner from '../../Components/Spinner/Spinner';\r\nimport {connect} from 'react-redux';\r\nimport SinglePost from '../../Components/Post/Post.js';\r\nimport ErrorComponent from '../../hoc/Error';\r\nimport Comments from '../../Components/Comments/Comments';\r\nimport OpenSocket from 'socket.io-client';\r\nimport * as idb from 'idb';\r\nimport ReactSnackBar from \"react-js-snackbar\";\r\nimport { ObjectID } from 'bson';\r\n\r\nconst dbPromise = idb.openDB('allPosts', 1, (db) => {\r\n    if (!db.objectStoreNames.contains('posts')) {\r\n        db.createObjectStore('posts', {keyPath: '_id'});\r\n    }\r\n\r\n    if (!db.objectStoreNames.contains('users')) {\r\n        db.createObjectStore('users', {keyPath: '_id'});\r\n    }\r\n\r\n    if (!db.objectStoreNames.contains('sync-posts')) {\r\n        db.createObjectStore('sync-posts', {keyPath: 'body'});\r\n    }\r\n});\r\n\r\nfunction deleteItemFromData(st, id) {\r\n    return dbPromise.then(db => {\r\n        var transaction = db.transaction(st, 'readwrite');\r\n        var store = transaction.objectStore(st);\r\n        store.delete(id);\r\n        return transaction.complete;\r\n    });\r\n}\r\n\r\nfunction createData(st, data) {\r\n    return dbPromise.then(db => {\r\n        var transaction = db.transaction(st, 'readwrite');\r\n        var store = transaction.objectStore(st);\r\n        store.put(data);\r\n        return transaction.complete;\r\n    });\r\n}\r\n\r\nclass Post extends Component {\r\n    signal = axios.CancelToken.source();\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputRef = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        commentEntered: '',\r\n        backdropShow: false,\r\n        modalShow: true,\r\n        showSnackbar: false,\r\n        editPostForm: {\r\n            title: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    placeholder: 'title of your post',\r\n                    type: 'text',\r\n                    name: 'title'\r\n                },\r\n                validationRules: {\r\n                    required: true,\r\n                    maxLength: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                value: '',\r\n                label: 'Title',\r\n                errorMessage: 'Characters should be between 1 and 30'\r\n            },\r\n            body: {\r\n                elementType: 'textarea',\r\n                elementConfig: {\r\n                    placeholder: 'Body of your post',\r\n                    type: 'text',\r\n                    name: 'body'\r\n                },\r\n                validationRules: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                value: '',\r\n                label: 'Body',\r\n                errorMessage: 'This Field Is Required'\r\n            },\r\n            postPhoto: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'file',\r\n                    name: 'image'\r\n                },\r\n                validationRules: {\r\n                    \r\n                },\r\n                valid: true,\r\n                touched: false,\r\n                value: '',\r\n                label: 'Image Of Your Post',\r\n                errorMessage: 'This Field Is Required'\r\n            },\r\n        },\r\n        formIsValid: false,\r\n        post: null,\r\n        imageSelected: null,\r\n        file: null,\r\n        deleteButtonClicked: false,\r\n        buttonSelected: false,\r\n        commentButtonDisabled: true,\r\n        comments: [],\r\n        numberOfComments: 0,\r\n        likes: 0,\r\n        buttonClicked: false,\r\n        editPostButtonClicked: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = OpenSocket('/');\r\n        socket.on('newcomment', data => {\r\n            this.setState(prevState => {\r\n                return {\r\n                    comments: prevState.comments.concat(data.comment)\r\n                };\r\n            });\r\n        });\r\n        socket.on('likePost', data => {\r\n            const postState = {...this.state.post};\r\n            postState.likes.push(data.like);\r\n            this.setState(prevState => {\r\n                return {\r\n                    likes: prevState.likes + 1,\r\n                    post: postState\r\n                };\r\n            });\r\n        })\r\n\r\n        socket.on('unLikePost', data => {\r\n            const likesFiltered = this.state.post.likes.filter(p => {\r\n                return p._id !== this.props.userId;\r\n            })\r\n            this.setState(prevState => {\r\n                return {\r\n                    likes: prevState.likes - 1,\r\n                    post: {\r\n                        ...prevState.post,\r\n                        likes: likesFiltered\r\n                    }\r\n                };\r\n            });\r\n        })\r\n        const requestBody = {\r\n            query: `\r\n                query SinglePost($postId: String!) {\r\n                    singlePost(postId: $postId) {\r\n                        _id\r\n                        title\r\n                        body\r\n                        photo\r\n                        createdAt\r\n                        user {\r\n                            _id\r\n                            name\r\n                            email\r\n                            photo\r\n                        }\r\n                        likes {\r\n                            _id\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n            `,\r\n            variables: {\r\n                postId: this.props.match.params.id\r\n            }\r\n            };\r\n            axios.post('/graphql', requestBody, {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                cancelToken: this.signal.token\r\n            }).then(result => {\r\n                if (!result) {\r\n                    return;\r\n                }\r\n                const singlePost = result.data.data.singlePost;\r\n                this.setState({post: singlePost, likes: singlePost.likes.length});\r\n                const input = document.querySelector('.likeInput');\r\n                singlePost.likes.forEach(p => {\r\n                    if (p._id === this.props.userId) {\r\n                        if (input) {\r\n                            input.checked = true;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            const requestBody2 = {\r\n                query: `\r\n                    query Comments($postId: String!) {\r\n                        comments(postId: $postId) {\r\n                            _id\r\n                            comment\r\n                            createdAt\r\n                            user {\r\n                              name\r\n                            }\r\n                          }\r\n                    }\r\n                `,\r\n                variables: {\r\n                    postId: this.props.match.params.id\r\n                }\r\n            };\r\n    \r\n            return axios.post('/graphql', requestBody2, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                cancelToken: this.signal.token\r\n            }).then(res => {\r\n                this.setState({comments: res.data.data.comments});\r\n            });\r\n        }\r\n\r\n    componentWillUnmount() {\r\n        this.signal.cancel('cancelled');\r\n    }\r\n\r\n    changeCommentInput = () => {\r\n        if (this.inputRef.current.value === '') {\r\n            this.setState({commentButtonDisabled: true});\r\n        } else {\r\n            this.setState({commentButtonDisabled: false});\r\n        }\r\n    }\r\n\r\n    openBackdrop = () => {\r\n        this.setState({backdropShow: true});\r\n        const editPostForm = {...this.state.editPostForm};\r\n        \r\n        const title = {...editPostForm['title']};\r\n        title.value = this.state.post.title;\r\n        title.valid = true;\r\n        editPostForm['title'] = title;\r\n\r\n        const body = {...editPostForm['body']};\r\n        body.value = this.state.post.body;\r\n        body.valid = true;\r\n        editPostForm['body'] = body;\r\n\r\n        this.setState({editPostForm: editPostForm, imageSelected: this.state.post.photo, formIsValid: true});\r\n    }\r\n\r\n    closeBackdrop = () => {\r\n        this.setState({backdropShow: false });\r\n    }\r\n\r\n    changeInput = (event, inputType) => {\r\n        const editPostForm = {...this.state.editPostForm};\r\n        const stateElement = editPostForm[inputType];\r\n        stateElement.value = event.target.value;\r\n        if (inputType === 'postPhoto') {\r\n            const file = event.target.files[0];\r\n            this.setState({file: file, imageSelected: URL.createObjectURL(file)});\r\n        }\r\n        stateElement.touched = true;\r\n        stateElement.valid = this.checkValidity(stateElement.validationRules, stateElement.value);\r\n        editPostForm[inputType] = stateElement;\r\n\r\n        let formIsValid = true;\r\n        for (let key in editPostForm) {\r\n            formIsValid = editPostForm[key].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({editPostForm: editPostForm, formIsValid: formIsValid});\r\n    }\r\n\r\n    checkValidity = (rules, value) => {\r\n        let isValid = true;\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.emailValid) {\r\n            var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n            isValid = re.test(value) && isValid;\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= 30 && isValid;\r\n        }\r\n\r\n        return isValid;\r\n\r\n    }\r\n\r\n    editPost = (e) => {\r\n        e.preventDefault();\r\n        this.setState(prevState => {\r\n            return {\r\n                editPostForm: {\r\n                    ...prevState.editPostForm,\r\n                    postPhoto: {\r\n                        ...prevState.editPostForm.postPhoto,\r\n                        value: ''\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        this.setState({buttonSelected: true, backdropShow: false, editPostButtonClicked: true});\r\n        const formData = new FormData();\r\n        formData.append('image', this.state.file);\r\n        return axios.put('/insertupdatePostImage', formData, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + this.props.token\r\n            },\r\n            cancelToken: this.signal.token\r\n        }).then(result => {\r\n            const filepath = result.data.filePath;\r\n            let path;\r\n            if (filepath === 'notFound') {\r\n                path = this.state.post.photo;\r\n            } else {\r\n                path = filepath;\r\n            }\r\n            const requestBody = {\r\n                query: `\r\n                    mutation UpdatePost($id: String!, $title: String!, $body: String!, $photo: String!) {\r\n                        updatePost(updatePostInput: {id: $id, title: $title, body: $body, photo: $photo}) {\r\n                            _id\r\n                            title\r\n                            body\r\n                            photo\r\n                            user {\r\n                            _id\r\n                            name\r\n                            }\r\n                        }\r\n                    }  \r\n                `,\r\n                variables: {\r\n                    id: this.state.post._id,\r\n                    title: this.state.editPostForm.title.value,\r\n                    body: this.state.editPostForm.body.value,\r\n                    photo: path\r\n                }\r\n            };\r\n\r\n            return axios.post('/graphql', requestBody, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + this.props.token\r\n                },\r\n                cancelToken: this.signal.token\r\n            }).then(res => {\r\n                const updatedPost = res.data.data.updatePost;\r\n                const post = {...this.state.post};\r\n                post.title = updatedPost.title;\r\n                post.body = updatedPost.body;\r\n                post.photo = path;\r\n                this.setState({post: post, buttonSelected: false, editPostButtonClicked: false});\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    deletePost = () => {\r\n        deleteItemFromData('posts', this.state.post._id)\r\n        this.setState({deleteButtonClicked: true});\r\n        const requestBody = {\r\n            query: `\r\n                mutation DeletePost($postId: String!) {\r\n                    deletePost(postId: $postId) {\r\n                        _id\r\n                        posts {\r\n                          title\r\n                          body\r\n                          photo\r\n                        }\r\n                      }\r\n                }\r\n            `,\r\n            variables: {\r\n                postId: this.state.post._id\r\n            }\r\n        };\r\n\r\n        return axios.post('/graphql', requestBody, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + this.props.token\r\n            },\r\n            cancelToken: this.signal.token\r\n        }).then(res => {\r\n            this.setState({deleteButtonClicked: false});\r\n            this.props.history.push('/posts');\r\n        });\r\n    };\r\n\r\n    // insert comment while offline\r\n\r\n    sendCommentInsertedToDB = (e) => {\r\n        e.preventDefault();\r\n        this.setState({commentButtonDisabled: true, showSnackbar: true});\r\n        const requestBody = {\r\n            query: `\r\n                mutation InsertComment($postId: String!, $comment: String!) {\r\n                    insertComment(postId: $postId, comment: $comment) {\r\n                        _id\r\n                        comment\r\n                        createdAt\r\n                        user {\r\n                          name\r\n                        }\r\n                      }\r\n                }\r\n            `,\r\n            variables: {\r\n                postId: this.state.post._id,\r\n                comment: this.inputRef.current.value\r\n            }\r\n        };\r\n\r\n        return axios.post('/graphql', requestBody, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + this.props.token\r\n            },\r\n            cancelToken: this.signal.token\r\n        }).then(res => {\r\n            const insertedComment = res.data.data.insertComment;\r\n            navigator.serviceWorker.ready.then(sw => {\r\n                sw.active.postMessage(JSON.stringify({\r\n                    postId: this.state.post._id,\r\n                    comment: insertedComment.comment,\r\n                    userInsertedComment: insertedComment.user.name\r\n                }));\r\n            })\r\n            this.inputRef.current.value = '';\r\n            this.setState(prevState => {\r\n                return {\r\n                    commentButtonDisabled: false,\r\n                    showSnackbar: false\r\n                    // comments: prevState.comments.concat(res.data.data.insertComment),\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    insertComment = (e) => {\r\n        if (navigator.onLine) {\r\n            this.sendCommentInsertedToDB(e);\r\n        } else {\r\n            e.preventDefault();\r\n            this.setState({commentButtonDisabled: true, showSnackbar: true});\r\n            if ('serviceWorker' in navigator && 'SyncManager' in window) {\r\n                navigator.serviceWorker.ready.then(sw => {\r\n                    const comment = {\r\n                        _id: new ObjectID().toHexString(),\r\n                        postId: this.state.post._id,\r\n                        comment: this.inputRef.current.value,\r\n                        userId: this.props.userId,\r\n                        token: this.props.token\r\n                    };\r\n                    createData('sync-comments', comment).then(() => {\r\n                        return sw.sync.register('sync-new-comments');\r\n                    })\r\n                    .then(() => {\r\n                        this.setState({showSnackbar: false})\r\n                    })\r\n                    .then(() => {\r\n                        this.setState({commentButtonDisabled: false})\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                    })\r\n                });\r\n            } else {\r\n                this.sendCommentInsertedToDB(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    goToProfile = (id) => {\r\n        this.props.history.push({\r\n            pathname: '/userprofile/' + id,\r\n        })\r\n    }\r\n\r\n    like = (event) => {\r\n        const isLiked = event.target.checked;\r\n        this.setState({buttonClicked: true});\r\n        let requestBody;\r\n        if (isLiked) {\r\n            requestBody = {\r\n                query: `\r\n                    mutation LikePost($postId: String!) {\r\n                        likePost(postId: $postId) {\r\n                            _id\r\n                            likes {\r\n                                name\r\n                            }\r\n                        }\r\n                    }\r\n                `,\r\n                variables: {\r\n                    postId: this.props.match.params.id\r\n                }\r\n            }\r\n        } else {\r\n            requestBody = {\r\n                query: `\r\n                    mutation UnlikePost($postId: String!) {\r\n                        unlikePost(postId: $postId) {\r\n                            _id\r\n                            likes {\r\n                                name\r\n                            }\r\n                        }\r\n                    }\r\n                `,\r\n                variables: {\r\n                    postId: this.props.match.params.id\r\n                }\r\n            }\r\n        }\r\n\r\n        return axios.post('/graphql', requestBody, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + this.props.token\r\n            },\r\n            cancelToken: this.signal.token\r\n        }).then(result => {\r\n            if (result.data.data.likePost) {\r\n                this.setState(prevState => {\r\n                    return {\r\n                        // likes: prevState.likes + 1,\r\n                        buttonClicked: false\r\n                    }\r\n                })\r\n            } else {\r\n                this.setState(prevState => {\r\n                    return {\r\n                        // likes: prevState.likes - 1,\r\n                        buttonClicked: false\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let elementArray = [];\r\n        for (let key in this.state.editPostForm) {\r\n            elementArray.push({\r\n                id: key,\r\n                config: this.state.editPostForm[key]\r\n            });\r\n        }\r\n        const {post, comments} = this.state\r\n        if (post === null || comments === null) {\r\n            return <Spinner />\r\n        }\r\n        return (\r\n            <>\r\n                <ReactSnackBar Icon={<i className=\"fas fa-alarm-clock\"></i>} Show={this.state.showSnackbar}>\r\n                    Creating Your Comment...\r\n                </ReactSnackBar>\r\n                <SinglePost openBackdrop={this.openBackdrop}\r\n                            title={this.state.post.title}\r\n                            body={this.state.post.body}\r\n                            image={this.state.post.photo}\r\n                            date={this.state.post.createdAt}\r\n                            postCreator={this.state.post.user.name}\r\n                            onGoToProfile={this.goToProfile}\r\n                            deletePost={this.deletePost}\r\n                            disabledd={this.state.deleteButtonClicked}\r\n                            userId={this.props.userId}\r\n                            postUserId={this.state.post.user._id}\r\n                            like={this.like}\r\n                            numberOfLikes={this.state.likes}\r\n                            buttonClicked={this.state.buttonClicked}\r\n                            token={this.props.token}\r\n                            userPostId={this.state.post.user._id}\r\n                            disabled={this.state.editPostButtonClicked} />\r\n\r\n                {this.props.token\r\n                 ?\r\n                    this.state.post.user._id !== this.props.userId\r\n                    ?\r\n                    <div className=\"post__comments\">\r\n                        <h2>Leave A Comment</h2>\r\n                        <form className=\"post__comments__form\">\r\n                            <input ref={this.inputRef} name=\"comment\" onChange={this.changeCommentInput} placeholder=\"Leave A comment Here\" />\r\n                            <Button type=\"submit\" disabled={this.state.commentButtonDisabled} click={(e) => this.insertComment(e)}>POST</Button>\r\n                        </form>\r\n                    </div>\r\n                    :\r\n                    null\r\n                 :\r\n                 null}\r\n                 <Comments comments={this.state.comments}\r\n                           numberOfComments={this.state.comments.length} />\r\n                <Backdrop show={this.state.backdropShow} />\r\n                <CSSTransition mountOnEnter\r\n                               unmountOnExit\r\n                               in={this.state.backdropShow}\r\n                               timeout={{\r\n                                   enter: 1000,\r\n                                   exit: 1000\r\n                               }}\r\n                               classNames={{\r\n                                   enter: '',\r\n                                   enterActive: 'ModalOpen',\r\n                                   exit: '',\r\n                                   exitActive: 'ModalClose'\r\n                               }}>\r\n                    <Modal viewModal={this.state.backdropShow}>\r\n                        <form className=\"editPost__form\" encType=\"multipart/form-data\">\r\n                            <h1>Edit Your Post</h1>\r\n                            <div className=\"editPost__icon\" onClick={this.closeBackdrop}>\r\n                                <i className=\"fas fa-times-circle\"></i>\r\n                            </div>\r\n                        {elementArray.map(element => {\r\n                            return (\r\n                                <div key={element.id}>\r\n                                    <Input elementType={element.config.elementType}\r\n                                            elementConfig={element.config.elementConfig}\r\n                                            value={element.config.value}\r\n                                            invalidN={!element.config.valid}\r\n                                            touched={element.config.touched}\r\n                                            label={element.config.label}\r\n                                            key={element.id}\r\n                                            changed={(event) => this.changeInput(event, element.id)}\r\n                                            errorMessage={element.config.errorMessage} />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                        <Button type=\"submit\" disabled={!this.state.formIsValid || this.state.buttonSelected} click={this.editPost}>Update Post</Button>\r\n                        {this.state.imageSelected\r\n                         ?\r\n                         <img src={this.state.imageSelected} name=\"image\" alt='postImage' className=\"imageSelected\" />\r\n                        :\r\n                        null}\r\n                        </form>\r\n                    </Modal>\r\n                </CSSTransition>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nexport default ErrorComponent(connect(mapStateToProps)(Post), axios);"],"sourceRoot":""}